- name: "AWS | ECS | Check ECS cluster name has been defined"
  fail: msg="You must specify the name of the ECS cluster, e.g. my-cluster"
  when: ecs_cluster_name is undefined

- name: "AWS | ECS | Check EC2 SSH key has been defined"
  fail: msg="You must specify the name of the SSH key you want to assign to the EC2 instances, e.g. my-ssh-key"
  when: key_name is undefined and ecs_state == "present"

- name: "AWS | ECS | Check EC2 security groups have been defined"
  fail: msg="You must specify a list of existing EC2 security groups IDs to apply to the auto-scaling EC2 instances"
  when: ec2_security_groups is undefined and ecs_state == "present"

- name: "AWS | ECS | Check EC2 availability zones have been defined"
  fail: msg="You must specify a list of existing EC2 availability zones for which to provisioning instances into"
  when: ec2_asg_availability_zones is undefined and ecs_state == "present"

- name: "AWS | ECS | Check VPC subnets have been defined"
  fail: msg="You must specify a list of existing VPC subnets for which to provision the EC2 nodes into"
  when: ec2_asg_vpc_subnets is undefined and ecs_state == "present"

- name: "AWS | EC2 | Check launch configuration name has been defined"
  fail: msg="You must specify the name of the launch configuration cluster, e.g. my-lc"
  when: ec2_launch_configuration_name is undefined

- name: "AWS | EC2 | Check EC2 Auto-Scaling Group name has been defined"
  fail: msg="You must specify the name of the launch configuration cluster, e.g. my-lc"
  when: ec2_asg_name is undefined

- name: "AWS | IAM | Check that default role for ECS is in place if none specified"
  iam_role:
    name: "{{ ecs_instance_profile_name }}"
    state: "present"
    assume_role_policy_document:
      Version: '2012-10-17'
      Statement:
      - Action: sts:AssumeRole
        Effect: Allow
        Principal:
          Service: "ec2.amazonaws.com"
    managed_policy:
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
  when: ecs_instance_profile_name == "ecsInstanceRole"
  register: role_creation_result

- name: "Print out result of role creation"
  debug:
    msg: "{{ role_creation_result }}"

    #- name: "Update name of role for ECS"
    #set_fact:
    #ecs_instance_profile_name: "{{ role_creation_result.arn }}"
